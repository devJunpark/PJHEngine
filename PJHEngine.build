<?xml version="1.0"?>
<project name="PJHEngine" default="build" basedir=".">
    <!-- properties for module targets.. -->
    <property name="_build_error_reason" value=""/>
    <property name="_copy_to_name"      value=""/>
    <property name="_copy_from_name"    value=""/>

    <!-- Properties for path -->
    <property name="build-dir"    value="build"/>
    <property name="packages-dir" value="packages"/>
    <property name="bin-dir"      value="bin"/>
    <property name="script-dir"   value="script"/>
    <property name="bin.dll-dir"  value="${bin-dir}/dlls"/>
    <property name="source-dir"   value="source"/>
    <property name="include-dir"  value="include"/>
    
    <property name="root-path"              value="${project::get-base-directory()}"/>
    <property name="include-path"           value="${root-path}/${include-dir}"/>
    <property name="packages-path"          value="${root-path}/${packages-dir}"/>
    <property name="bin.dll-path"           value="${root-path}/${bin.dll-dir}"/>
    <property name="external-include-path"  value="${packages-path}/includes"/>

    <!-- Properties for filename -->
    <property name="build-number" value="build_number"/>

    <!-- Properties for build -->
    <property name="PJHEngine.debug" value="false"/>
    <property name="PJHEngine.debug" value="${arg.debug}" if="${property::exists('arg.debug')}"/>
    <property name="PJHEngine.name"  value="${project::get-name()}"/>
    <mkdir dir="${build-dir}" if="${not directory::exists(build-dir)}" />
    <echo message="1.0.0.1" 
          if="${not file::exists(build-number)}" 
          file="${build-dir}/${build-number}" />
    <loadfile file="${project::get-base-directory()}/${build-dir}/${build-number}"
        property="PJHEngine.build_number"/>
    <property name="PJHEngine.locale" value="kor"/>
    <property name="PJHEngine.locale" value="${arg.locale}" if="${property::exists('arg.locale')}"/>

    <fileset id="runtime.PJHEngine.vcproj"
             basedir="${project::get-base-directory()}">
        <include name="${source-dir}/*"/>
        <include name="${include-dir}/*"/> 
    </fileset>
    <property name="PJHEngine.rebuild" value="false"/>
    <property name="PJHEngine.rebuild" value="${arg.rebuild}" if="${property::exists('arg.rebuild')}"/>
    <property name="PJHEngine.outputtype" value="lib"/>
    <property name="PJHEngine.outputtype" value="${arg.outputtype}" if="${property::exists('arg.outputtype')}"/>

    <!-- external packages -->
    <property name="Library.boost"          value="boost_1_59_0"/>
    <property name="Library.test"           value="xxxx"/>

    <!-- set default value for either using library or not. -->
    <property name="LIB_USE_BOOST"          value="True"/>
    <property name="LIB_USE_TEST"           value="True"/>

    <!-- set use_lib flag as locale -->
    <if test="${PJHEngine.locale=='kor'}">
        <property name="LIB_USE_TEST"           value="False"/>  
    </if>

    <!-- Targets -->
    <!-- TODO::Define target prepare for build, build for debug, build for release, run and open sln -->
    <target name="prepare-build">
        <echo message="buliding prepare-build"/>
        <tstamp property="build.buildtime" pattern="yyyy MM dd"/>
        <echo message="build time : ${build.buildtime}" />
           
        <echo message="prepare-build Done."/>
    </target>


    <target name="build-test-test" depends="prepare-build">
        <echo message="build-test-test target. Just propose for testing."/>
        <echo message="PJHEngine.rebuild is ${PJHEngine.rebuild}"/>
        <property name="resultstored" value="-1"/>

        <property name="lib_boost_dir" value="${packages-path}/boost/${Library.boost}"/> 
        <property name="lib_boost_stage_dir" value="${lib_boost_dir}/stage/lib"/>
        <exec program="cmd.exe" workingdir="${root-path}"
              commandline="/c rmdir /s /q &quot;${lib_boost_stage_dir}&quot;"
              if="${directory::exists(lib_boost_stage_dir) and PJHEngine.rebuild=='true'}"
              resultproperty="resultstored" failonerror="false"/>

        <echo message="result stored : ${resultstored}"/>
        <call target="build-failed" if="${resultstored!='0'}"/>

        <echo message="Test END"/>
    </target>
     
    <!-- Build External library. -->
    <target name="build-library" depends="prepare-build">
        <echo message="will bulid target name"/>
        
        <!-- build boost library -->
        <echo message="LIB_USE_BOOST        = ${LIB_USE_BOOST}"/>
        <if test="${LIB_USE_BOOST=='True'}">
            <property name="lib_boost_dir" value="${packages-path}/boost/${Library.boost}"/>
            <if test="${not directory::exists(lib_boost_dir)}">
                <property name="_build_error_reason" value="not found boost directory"/>
                <call target="build-failed"/>
            </if>
            <property name="lib_boost_exe" value="${lib_boost_dir}/b2.exe"/>
            <if test="${not file::exists(lib_boost_exe)}">
                <exec program="${lib_boost_dir}/bootstrap.bat"
                      workingdir="${lib_boost_dir}"/> 
            </if>
            <property name="lib_boost_stage_dir" value="${lib_boost_dir}/stage/lib"/>
            <if test="${PJHEngine.rebuild=='true'}">
                <property name="lib_boost_runtimeoption" value="shared"/>
                <!--
                <property name="lib_boost_runtimeoption" value="static" if="${PJHEngine.outputtype=='lib'}"/>
                -->
                <echo message="in the rebuild section"/>
                <exec program="cmd.exe" workingdir="${root-path}"
                      commandline="/c rmdir /s /q &quot;${lib_boost_stage_dir}&quot;"
                      if="${directory::exists(lib_boost_stage_dir) and PJHEngine.rebuild=='true'}"/>
    
                <exec program="${lib_boost_exe}" workingdir="${lib_boost_dir}"
                      commandline="-j 2 variant=debug link=static threading=multi address-model=64 runtime-link=${lib_boost_runtimeoption}"/> 
            </if>
            <if test="${not directory::exists(lib_boost_stage_dir)}">
                <property name="_build_error_reason" value="don't create 'stage/lib' directory"/>
                <call target="build-failed"/>
            </if>
            <copy todir="${bin.dll-path}">
                <fileset basedir="${lib_boost_stage_dir}">
                    <include name="*.lib"/>
                </fileset>
            </copy>

            <property name="_copy_from_name"  value="${lib_boost_dir}/boost"/>
            <property name="_copy_to_name"    value="${external-include-path}/boost"/>
            <mkdir dir="${external-include-path}" if="${not directory::exists(external-include-path)}"/>
            <call target="create-link"/>
        </if>



        <!-- build etc library... wil be added if you need something. -->
        <echo message="Something library will be added..." />

        <call target="all-param-print"/>
    </target>

    <target name="build" depends="prepare-build">
        <echo message="Buliding buildmode" />
        <call target="all-param-print"/>
    </target>

    <!-- For information.. -->
    <target name="all-param-print">
        <!--
        <script language="C#">
            <references>
                <include name="System.dll"/>
            </references>
            <imports>
                <import namespace="System.Collections.Generic"/>
            </imports>
            <code>
                <![CDATA[
                public static void ScriptMain(Project project)
                {
                    SortedDictionary<string, string> sorted = new SortedDictionary<string, string>();
                    foreach( DictionaryEntry entry in project.Properties) 
                    {
                        sorted.Add((string)entry.Key, (string)entry.Value);
                    }
                    foreach( KeyValuePair<string, string> entry in sorted )
                    {
                        project.Log(Level.Info, "{0}           ={1}", entry.Key, entry.Value); 
                    }
                }
                ]]>
            </code>
        </script>
        --> 
        <echo message="PJHEngine.name             =${PJHEngine.name}"/> 
        <echo message="PJHEngine.debug            =${PJHEngine.debug}"/>
        <echo message="PJHEngine.locale           =${PJHEngine.locale}"/> 
        <echo message="PJHEngine.rebuild          =${PJHEngine.rebuild}"/>
        <echo message="PJHEngine.outputtype       =${PJHEngine.outputtype}"/>
        <echo message="PJHEngine.build_number     =${PJHEngine.build_number}"/>
        <echo message=""/>
        <if test="${property::exists('Library.boost')}">
            <echo message="Library.boost            =${Library.boost}[${LIB_USE_BOOST}]"/>
        </if>
        <if test="${property::exists('Library.test')}">
            <echo message="Library.test             =${Library.test}[${LIB_USE_TEST}]"/>
        </if>
    </target>


    <!-- Module targets for building. -->

    <!-- This target need to set properties that _copy_to_name and _copy_from_name -->
    <target name="create-link">
        <echo message="will symbolic create link files or directories"/>
        <echo message="generate link ${_copy_from_name} ----> ${_copy_to_name}"/>
        <exec program="cmd.exe" workingdir="${root-path}" if="${directory::exists(_copy_to_name)}"
              commandline="/c rmdir &quot;${_copy_to_name}&quot;"
              resultproperty="resultstored" failonerror="false"/>
        <exec program="cmd.exe" workingdir="${root-path}" 
              commandline="/c mklink /D &quot;${_copy_to_name}&quot; &quot;${_copy_from_name}&quot;"
              resultproperty="resultstored" failonerror="false"/>
        <echo message="result stored : ${resultstored}"/>
        <call target="build-failed" if="${resultstored!='0'}"/>  
    </target>

    <!-- This target need to set property of _build_error_reason -->
    <target name="build-failed">
        <echo message="Build Failed... "/>
        <echo message="Reason is ${_build_error_reason}"/>
        <fail/>
    </target>
</project>
